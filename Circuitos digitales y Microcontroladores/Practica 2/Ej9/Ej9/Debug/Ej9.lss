
Ej9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000006ea  0000075e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000766  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000798  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013bc  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000970  00000000  00000000  00001c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000aae  00000000  00000000  000025ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000260  00000000  00000000  0000309c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000562  00000000  00000000  000032fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000efe  00000000  00000000  0000385e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  0000475c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
   4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
   8:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
   c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  14:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  1c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  20:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  24:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  28:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  30:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  38:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  3c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  40:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  44:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  48:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  4c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  50:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  58:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  5c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  60:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  68:	f4 02       	muls	r31, r20
  6a:	f8 02       	muls	r31, r24
  6c:	fc 02       	muls	r31, r28
  6e:	00 03       	mulsu	r16, r16
  70:	04 03       	mulsu	r16, r20
  72:	08 03       	fmul	r16, r16
  74:	0c 03       	fmul	r16, r20
  76:	10 03       	mulsu	r17, r16
  78:	14 03       	mulsu	r17, r20
  7a:	18 03       	fmul	r17, r16
  7c:	1c 03       	fmul	r17, r20
  7e:	20 03       	mulsu	r18, r16
  80:	24 03       	mulsu	r18, r20
  82:	28 03       	fmul	r18, r16
  84:	2c 03       	fmul	r18, r20
  86:	30 03       	mulsu	r19, r16

00000088 <LcdCustomChar>:
  88:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  98:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  a8:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  b8:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000c8 <__ctors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d8 e0       	ldi	r29, 0x08	; 8
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
  d4:	11 e0       	ldi	r17, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	ea ee       	ldi	r30, 0xEA	; 234
  dc:	f6 e0       	ldi	r31, 0x06	; 6
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	a8 30       	cpi	r26, 0x08	; 8
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>
  ea:	0e 94 34 03 	call	0x668	; 0x668 <main>
  ee:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <_exit>

000000f2 <__bad_interrupt>:
  f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f6 <LCDsendChar>:
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
  f6:	65 b1       	in	r22, 0x05	; 5
  f8:	98 2f       	mov	r25, r24
  fa:	90 74       	andi	r25, 0x40	; 64
  fc:	49 2f       	mov	r20, r25
  fe:	50 e0       	ldi	r21, 0x00	; 0
 100:	55 95       	asr	r21
 102:	47 95       	ror	r20
 104:	55 95       	asr	r21
 106:	47 95       	ror	r20
 108:	55 95       	asr	r21
 10a:	47 95       	ror	r20
 10c:	55 95       	asr	r21
 10e:	47 95       	ror	r20
 110:	98 2f       	mov	r25, r24
 112:	90 78       	andi	r25, 0x80	; 128
 114:	29 2f       	mov	r18, r25
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	02 2e       	mov	r0, r18
 11a:	23 2f       	mov	r18, r19
 11c:	00 0c       	add	r0, r0
 11e:	22 1f       	adc	r18, r18
 120:	33 0b       	sbc	r19, r19
 122:	00 0c       	add	r0, r0
 124:	22 1f       	adc	r18, r18
 126:	33 1f       	adc	r19, r19
 128:	96 2f       	mov	r25, r22
 12a:	99 7f       	andi	r25, 0xF9	; 249
 12c:	49 2b       	or	r20, r25
 12e:	24 2b       	or	r18, r20
 130:	25 b9       	out	0x05, r18	; 5
 132:	68 b1       	in	r22, 0x08	; 8
 134:	98 2f       	mov	r25, r24
 136:	90 71       	andi	r25, 0x10	; 16
 138:	49 2f       	mov	r20, r25
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	55 95       	asr	r21
 13e:	47 95       	ror	r20
 140:	55 95       	asr	r21
 142:	47 95       	ror	r20
 144:	55 95       	asr	r21
 146:	47 95       	ror	r20
 148:	98 2f       	mov	r25, r24
 14a:	90 72       	andi	r25, 0x20	; 32
 14c:	29 2f       	mov	r18, r25
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	35 95       	asr	r19
 152:	27 95       	ror	r18
 154:	35 95       	asr	r19
 156:	27 95       	ror	r18
 158:	35 95       	asr	r19
 15a:	27 95       	ror	r18
 15c:	96 2f       	mov	r25, r22
 15e:	99 7f       	andi	r25, 0xF9	; 249
 160:	49 2b       	or	r20, r25
 162:	24 2b       	or	r18, r20
 164:	28 b9       	out	0x08, r18	; 8
 166:	9b b1       	in	r25, 0x0b	; 11
 168:	92 60       	ori	r25, 0x02	; 2
 16a:	9b b9       	out	0x0b, r25	; 11
 16c:	9b b1       	in	r25, 0x0b	; 11
 16e:	91 60       	ori	r25, 0x01	; 1
 170:	9b b9       	out	0x0b, r25	; 11
 172:	2d e0       	ldi	r18, 0x0D	; 13
 174:	2a 95       	dec	r18
 176:	f1 f7       	brne	.-4      	; 0x174 <LCDsendChar+0x7e>
 178:	00 00       	nop
 17a:	9b b1       	in	r25, 0x0b	; 11
 17c:	9e 7f       	andi	r25, 0xFE	; 254
 17e:	9b b9       	out	0x0b, r25	; 11
 180:	9b b1       	in	r25, 0x0b	; 11
 182:	9d 7f       	andi	r25, 0xFD	; 253
 184:	9b b9       	out	0x0b, r25	; 11
 186:	9d e0       	ldi	r25, 0x0D	; 13
 188:	9a 95       	dec	r25
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCDsendChar+0x92>
 18c:	00 00       	nop
 18e:	65 b1       	in	r22, 0x05	; 5
 190:	20 e1       	ldi	r18, 0x10	; 16
 192:	82 9f       	mul	r24, r18
 194:	c0 01       	movw	r24, r0
 196:	11 24       	eor	r1, r1
 198:	ac 01       	movw	r20, r24
 19a:	40 74       	andi	r20, 0x40	; 64
 19c:	55 27       	eor	r21, r21
 19e:	55 95       	asr	r21
 1a0:	47 95       	ror	r20
 1a2:	55 95       	asr	r21
 1a4:	47 95       	ror	r20
 1a6:	55 95       	asr	r21
 1a8:	47 95       	ror	r20
 1aa:	55 95       	asr	r21
 1ac:	47 95       	ror	r20
 1ae:	9c 01       	movw	r18, r24
 1b0:	20 78       	andi	r18, 0x80	; 128
 1b2:	33 27       	eor	r19, r19
 1b4:	02 2e       	mov	r0, r18
 1b6:	23 2f       	mov	r18, r19
 1b8:	00 0c       	add	r0, r0
 1ba:	22 1f       	adc	r18, r18
 1bc:	33 0b       	sbc	r19, r19
 1be:	00 0c       	add	r0, r0
 1c0:	22 1f       	adc	r18, r18
 1c2:	33 1f       	adc	r19, r19
 1c4:	36 2f       	mov	r19, r22
 1c6:	39 7f       	andi	r19, 0xF9	; 249
 1c8:	43 2b       	or	r20, r19
 1ca:	24 2b       	or	r18, r20
 1cc:	25 b9       	out	0x05, r18	; 5
 1ce:	48 b1       	in	r20, 0x08	; 8
 1d0:	9c 01       	movw	r18, r24
 1d2:	20 71       	andi	r18, 0x10	; 16
 1d4:	33 27       	eor	r19, r19
 1d6:	35 95       	asr	r19
 1d8:	27 95       	ror	r18
 1da:	35 95       	asr	r19
 1dc:	27 95       	ror	r18
 1de:	35 95       	asr	r19
 1e0:	27 95       	ror	r18
 1e2:	80 72       	andi	r24, 0x20	; 32
 1e4:	99 27       	eor	r25, r25
 1e6:	95 95       	asr	r25
 1e8:	87 95       	ror	r24
 1ea:	95 95       	asr	r25
 1ec:	87 95       	ror	r24
 1ee:	95 95       	asr	r25
 1f0:	87 95       	ror	r24
 1f2:	94 2f       	mov	r25, r20
 1f4:	99 7f       	andi	r25, 0xF9	; 249
 1f6:	29 2b       	or	r18, r25
 1f8:	82 2b       	or	r24, r18
 1fa:	88 b9       	out	0x08, r24	; 8
 1fc:	8b b1       	in	r24, 0x0b	; 11
 1fe:	82 60       	ori	r24, 0x02	; 2
 200:	8b b9       	out	0x0b, r24	; 11
 202:	8b b1       	in	r24, 0x0b	; 11
 204:	81 60       	ori	r24, 0x01	; 1
 206:	8b b9       	out	0x0b, r24	; 11
 208:	8d e0       	ldi	r24, 0x0D	; 13
 20a:	8a 95       	dec	r24
 20c:	f1 f7       	brne	.-4      	; 0x20a <LCDsendChar+0x114>
 20e:	00 00       	nop
 210:	8b b1       	in	r24, 0x0b	; 11
 212:	8e 7f       	andi	r24, 0xFE	; 254
 214:	8b b9       	out	0x0b, r24	; 11
 216:	8b b1       	in	r24, 0x0b	; 11
 218:	8d 7f       	andi	r24, 0xFD	; 253
 21a:	8b b9       	out	0x0b, r24	; 11
 21c:	9d e0       	ldi	r25, 0x0D	; 13
 21e:	9a 95       	dec	r25
 220:	f1 f7       	brne	.-4      	; 0x21e <LCDsendChar+0x128>
 222:	00 00       	nop
 224:	08 95       	ret

00000226 <LCDsendCommand>:
 226:	65 b1       	in	r22, 0x05	; 5
 228:	98 2f       	mov	r25, r24
 22a:	90 74       	andi	r25, 0x40	; 64
 22c:	49 2f       	mov	r20, r25
 22e:	50 e0       	ldi	r21, 0x00	; 0
 230:	55 95       	asr	r21
 232:	47 95       	ror	r20
 234:	55 95       	asr	r21
 236:	47 95       	ror	r20
 238:	55 95       	asr	r21
 23a:	47 95       	ror	r20
 23c:	55 95       	asr	r21
 23e:	47 95       	ror	r20
 240:	98 2f       	mov	r25, r24
 242:	90 78       	andi	r25, 0x80	; 128
 244:	29 2f       	mov	r18, r25
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	02 2e       	mov	r0, r18
 24a:	23 2f       	mov	r18, r19
 24c:	00 0c       	add	r0, r0
 24e:	22 1f       	adc	r18, r18
 250:	33 0b       	sbc	r19, r19
 252:	00 0c       	add	r0, r0
 254:	22 1f       	adc	r18, r18
 256:	33 1f       	adc	r19, r19
 258:	96 2f       	mov	r25, r22
 25a:	99 7f       	andi	r25, 0xF9	; 249
 25c:	49 2b       	or	r20, r25
 25e:	24 2b       	or	r18, r20
 260:	25 b9       	out	0x05, r18	; 5
 262:	68 b1       	in	r22, 0x08	; 8
 264:	98 2f       	mov	r25, r24
 266:	90 71       	andi	r25, 0x10	; 16
 268:	49 2f       	mov	r20, r25
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	55 95       	asr	r21
 26e:	47 95       	ror	r20
 270:	55 95       	asr	r21
 272:	47 95       	ror	r20
 274:	55 95       	asr	r21
 276:	47 95       	ror	r20
 278:	98 2f       	mov	r25, r24
 27a:	90 72       	andi	r25, 0x20	; 32
 27c:	29 2f       	mov	r18, r25
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	35 95       	asr	r19
 282:	27 95       	ror	r18
 284:	35 95       	asr	r19
 286:	27 95       	ror	r18
 288:	35 95       	asr	r19
 28a:	27 95       	ror	r18
 28c:	96 2f       	mov	r25, r22
 28e:	99 7f       	andi	r25, 0xF9	; 249
 290:	49 2b       	or	r20, r25
 292:	24 2b       	or	r18, r20
 294:	28 b9       	out	0x08, r18	; 8
 296:	9b b1       	in	r25, 0x0b	; 11
 298:	91 60       	ori	r25, 0x01	; 1
 29a:	9b b9       	out	0x0b, r25	; 11
 29c:	e9 ef       	ldi	r30, 0xF9	; 249
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	31 97       	sbiw	r30, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <LCDsendCommand+0x7a>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <LCDsendCommand+0x80>
 2a6:	00 00       	nop
 2a8:	9b b1       	in	r25, 0x0b	; 11
 2aa:	9e 7f       	andi	r25, 0xFE	; 254
 2ac:	9b b9       	out	0x0b, r25	; 11
 2ae:	e9 ef       	ldi	r30, 0xF9	; 249
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	31 97       	sbiw	r30, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <LCDsendCommand+0x8c>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <LCDsendCommand+0x92>
 2b8:	00 00       	nop
 2ba:	65 b1       	in	r22, 0x05	; 5
 2bc:	f0 e1       	ldi	r31, 0x10	; 16
 2be:	8f 9f       	mul	r24, r31
 2c0:	c0 01       	movw	r24, r0
 2c2:	11 24       	eor	r1, r1
 2c4:	ac 01       	movw	r20, r24
 2c6:	40 74       	andi	r20, 0x40	; 64
 2c8:	55 27       	eor	r21, r21
 2ca:	55 95       	asr	r21
 2cc:	47 95       	ror	r20
 2ce:	55 95       	asr	r21
 2d0:	47 95       	ror	r20
 2d2:	55 95       	asr	r21
 2d4:	47 95       	ror	r20
 2d6:	55 95       	asr	r21
 2d8:	47 95       	ror	r20
 2da:	9c 01       	movw	r18, r24
 2dc:	20 78       	andi	r18, 0x80	; 128
 2de:	33 27       	eor	r19, r19
 2e0:	02 2e       	mov	r0, r18
 2e2:	23 2f       	mov	r18, r19
 2e4:	00 0c       	add	r0, r0
 2e6:	22 1f       	adc	r18, r18
 2e8:	33 0b       	sbc	r19, r19
 2ea:	00 0c       	add	r0, r0
 2ec:	22 1f       	adc	r18, r18
 2ee:	33 1f       	adc	r19, r19
 2f0:	36 2f       	mov	r19, r22
 2f2:	39 7f       	andi	r19, 0xF9	; 249
 2f4:	43 2b       	or	r20, r19
 2f6:	24 2b       	or	r18, r20
 2f8:	25 b9       	out	0x05, r18	; 5
 2fa:	48 b1       	in	r20, 0x08	; 8
 2fc:	9c 01       	movw	r18, r24
 2fe:	20 71       	andi	r18, 0x10	; 16
 300:	33 27       	eor	r19, r19
 302:	35 95       	asr	r19
 304:	27 95       	ror	r18
 306:	35 95       	asr	r19
 308:	27 95       	ror	r18
 30a:	35 95       	asr	r19
 30c:	27 95       	ror	r18
 30e:	80 72       	andi	r24, 0x20	; 32
 310:	99 27       	eor	r25, r25
 312:	95 95       	asr	r25
 314:	87 95       	ror	r24
 316:	95 95       	asr	r25
 318:	87 95       	ror	r24
 31a:	95 95       	asr	r25
 31c:	87 95       	ror	r24
 31e:	94 2f       	mov	r25, r20
 320:	99 7f       	andi	r25, 0xF9	; 249
 322:	29 2b       	or	r18, r25
 324:	82 2b       	or	r24, r18
 326:	88 b9       	out	0x08, r24	; 8
 328:	8b b1       	in	r24, 0x0b	; 11
 32a:	81 60       	ori	r24, 0x01	; 1
 32c:	8b b9       	out	0x0b, r24	; 11
 32e:	89 ef       	ldi	r24, 0xF9	; 249
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <LCDsendCommand+0x10c>
 336:	00 c0       	rjmp	.+0      	; 0x338 <LCDsendCommand+0x112>
 338:	00 00       	nop
 33a:	8b b1       	in	r24, 0x0b	; 11
 33c:	8e 7f       	andi	r24, 0xFE	; 254
 33e:	8b b9       	out	0x0b, r24	; 11
 340:	e9 ef       	ldi	r30, 0xF9	; 249
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	31 97       	sbiw	r30, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <LCDsendCommand+0x11e>
 348:	00 c0       	rjmp	.+0      	; 0x34a <LCDsendCommand+0x124>
 34a:	00 00       	nop
 34c:	08 95       	ret

0000034e <LCDstring>:
 34e:	0f 93       	push	r16
 350:	1f 93       	push	r17
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	00 97       	sbiw	r24, 0x00	; 0
 358:	69 f0       	breq	.+26     	; 0x374 <LCDstring+0x26>
 35a:	d6 2f       	mov	r29, r22
 35c:	8c 01       	movw	r16, r24
 35e:	c0 e0       	ldi	r28, 0x00	; 0
 360:	07 c0       	rjmp	.+14     	; 0x370 <LCDstring+0x22>
 362:	f8 01       	movw	r30, r16
 364:	ec 0f       	add	r30, r28
 366:	f1 1d       	adc	r31, r1
 368:	80 81       	ld	r24, Z
 36a:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCDsendChar>
 36e:	cf 5f       	subi	r28, 0xFF	; 255
 370:	cd 17       	cp	r28, r29
 372:	b8 f3       	brcs	.-18     	; 0x362 <LCDstring+0x14>
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	1f 91       	pop	r17
 37a:	0f 91       	pop	r16
 37c:	08 95       	ret

0000037e <LCDGotoXY>:
 37e:	62 30       	cpi	r22, 0x02	; 2
 380:	31 f0       	breq	.+12     	; 0x38e <LCDGotoXY+0x10>
 382:	63 30       	cpi	r22, 0x03	; 3
 384:	31 f0       	breq	.+12     	; 0x392 <LCDGotoXY+0x14>
 386:	61 30       	cpi	r22, 0x01	; 1
 388:	29 f4       	brne	.+10     	; 0x394 <LCDGotoXY+0x16>
 38a:	80 5c       	subi	r24, 0xC0	; 192
 38c:	03 c0       	rjmp	.+6      	; 0x394 <LCDGotoXY+0x16>
 38e:	8c 5e       	subi	r24, 0xEC	; 236
 390:	01 c0       	rjmp	.+2      	; 0x394 <LCDGotoXY+0x16>
 392:	8c 5a       	subi	r24, 0xAC	; 172
 394:	80 68       	ori	r24, 0x80	; 128
 396:	0e 94 13 01 	call	0x226	; 0x226 <LCDsendCommand>
 39a:	08 95       	ret

0000039c <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 39c:	ef 92       	push	r14
 39e:	ff 92       	push	r15
 3a0:	0f 93       	push	r16
 3a2:	1f 93       	push	r17
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	7c 01       	movw	r14, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 3aa:	86 2f       	mov	r24, r22
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	80 64       	ori	r24, 0x40	; 64
	for (i=0; i<8; i++){
 3bc:	c0 e0       	ldi	r28, 0x00	; 0
 3be:	d0 e0       	ldi	r29, 0x00	; 0
 3c0:	0d c0       	rjmp	.+26     	; 0x3dc <LCDdefinechar+0x40>
		pcc=pgm_read_byte(&pc[i]);
 3c2:	f7 01       	movw	r30, r14
 3c4:	ec 0f       	add	r30, r28
 3c6:	fd 1f       	adc	r31, r29
 3c8:	14 91       	lpm	r17, Z
		LCDsendCommand(a++);
 3ca:	01 e0       	ldi	r16, 0x01	; 1
 3cc:	08 0f       	add	r16, r24
 3ce:	0e 94 13 01 	call	0x226	; 0x226 <LCDsendCommand>
		LCDsendChar(pcc);
 3d2:	81 2f       	mov	r24, r17
 3d4:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 3d8:	21 96       	adiw	r28, 0x01	; 1
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
 3da:	80 2f       	mov	r24, r16
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 3dc:	c8 30       	cpi	r28, 0x08	; 8
 3de:	d1 05       	cpc	r29, r1
 3e0:	80 f3       	brcs	.-32     	; 0x3c2 <LCDdefinechar+0x26>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	1f 91       	pop	r17
 3e8:	0f 91       	pop	r16
 3ea:	ff 90       	pop	r15
 3ec:	ef 90       	pop	r14
 3ee:	08 95       	ret

000003f0 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f4:	85 ea       	ldi	r24, 0xA5	; 165
 3f6:	9e e0       	ldi	r25, 0x0E	; 14
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <LCDinit+0x8>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <LCDinit+0xe>
 3fe:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	//LDP=0x00;
	LCD_DATAWR(0x00);	
 400:	85 b1       	in	r24, 0x05	; 5
 402:	89 7f       	andi	r24, 0xF9	; 249
 404:	85 b9       	out	0x05, r24	; 5
 406:	88 b1       	in	r24, 0x08	; 8
 408:	89 7f       	andi	r24, 0xF9	; 249
 40a:	88 b9       	out	0x08, r24	; 8
	LCP=0x00;
 40c:	1b b8       	out	0x0b, r1	; 11
	DDRC|=0x06;
 40e:	87 b1       	in	r24, 0x07	; 7
 410:	86 60       	ori	r24, 0x06	; 6
 412:	87 b9       	out	0x07, r24	; 7
	DDRB|=0x06;
 414:	84 b1       	in	r24, 0x04	; 4
 416:	86 60       	ori	r24, 0x06	; 6
 418:	84 b9       	out	0x04, r24	; 4
	LDDR1|=1<<LCD_D7|1<<LCD_D6;
 41a:	84 b1       	in	r24, 0x04	; 4
 41c:	86 60       	ori	r24, 0x06	; 6
 41e:	84 b9       	out	0x04, r24	; 4
	LDDR2|=1<<LCD_D4|1<<LCD_D5;
 420:	87 b1       	in	r24, 0x07	; 7
 422:	86 60       	ori	r24, 0x06	; 6
 424:	87 b9       	out	0x07, r24	; 7
	//LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 426:	8a b1       	in	r24, 0x0a	; 10
 428:	83 60       	ori	r24, 0x03	; 3
 42a:	8a b9       	out	0x0a, r24	; 10
   //---------one------
	//LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
	LCD_DATAWR(0b00110000);	
 42c:	85 b1       	in	r24, 0x05	; 5
 42e:	89 7f       	andi	r24, 0xF9	; 249
 430:	85 b9       	out	0x05, r24	; 5
 432:	88 b1       	in	r24, 0x08	; 8
 434:	86 60       	ori	r24, 0x06	; 6
 436:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 438:	8b b1       	in	r24, 0x0b	; 11
 43a:	81 60       	ori	r24, 0x01	; 1
 43c:	8b b9       	out	0x0b, r24	; 11
 43e:	89 ef       	ldi	r24, 0xF9	; 249
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 446:	00 c0       	rjmp	.+0      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 448:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 44a:	8b b1       	in	r24, 0x0b	; 11
 44c:	8e 7f       	andi	r24, 0xFE	; 254
 44e:	8b b9       	out	0x0b, r24	; 11
 450:	89 ef       	ldi	r24, 0xF9	; 249
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 458:	00 c0       	rjmp	.+0      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 45a:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	//LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
	LCD_DATAWR(0b00110000);	
 45c:	85 b1       	in	r24, 0x05	; 5
 45e:	89 7f       	andi	r24, 0xF9	; 249
 460:	85 b9       	out	0x05, r24	; 5
 462:	88 b1       	in	r24, 0x08	; 8
 464:	86 60       	ori	r24, 0x06	; 6
 466:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 468:	8b b1       	in	r24, 0x0b	; 11
 46a:	81 60       	ori	r24, 0x01	; 1
 46c:	8b b9       	out	0x0b, r24	; 11
 46e:	89 ef       	ldi	r24, 0xF9	; 249
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	01 97       	sbiw	r24, 0x01	; 1
 474:	f1 f7       	brne	.-4      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 476:	00 c0       	rjmp	.+0      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 478:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 47a:	8b b1       	in	r24, 0x0b	; 11
 47c:	8e 7f       	andi	r24, 0xFE	; 254
 47e:	8b b9       	out	0x0b, r24	; 11
 480:	89 ef       	ldi	r24, 0xF9	; 249
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 488:	00 c0       	rjmp	.+0      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 48a:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	//LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
	LCD_DATAWR(0b00100000);	
 48c:	85 b1       	in	r24, 0x05	; 5
 48e:	89 7f       	andi	r24, 0xF9	; 249
 490:	85 b9       	out	0x05, r24	; 5
 492:	88 b1       	in	r24, 0x08	; 8
 494:	89 7f       	andi	r24, 0xF9	; 249
 496:	84 60       	ori	r24, 0x04	; 4
 498:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 49a:	8b b1       	in	r24, 0x0b	; 11
 49c:	81 60       	ori	r24, 0x01	; 1
 49e:	8b b9       	out	0x0b, r24	; 11
 4a0:	89 ef       	ldi	r24, 0xF9	; 249
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	01 97       	sbiw	r24, 0x01	; 1
 4a6:	f1 f7       	brne	.-4      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 4a8:	00 c0       	rjmp	.+0      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 4aa:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 4ac:	8b b1       	in	r24, 0x0b	; 11
 4ae:	8e 7f       	andi	r24, 0xFE	; 254
 4b0:	8b b9       	out	0x0b, r24	; 11
 4b2:	89 ef       	ldi	r24, 0xF9	; 249
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	01 97       	sbiw	r24, 0x01	; 1
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 4bc:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 4be:	88 e2       	ldi	r24, 0x28	; 40
 4c0:	0e 94 13 01 	call	0x226	; 0x226 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 4c4:	8c e0       	ldi	r24, 0x0C	; 12
 4c6:	0e 94 13 01 	call	0x226	; 0x226 <LCDsendCommand>
		//init 8 custom chars
	uint8_t ch=0, chn=0;
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	c0 e0       	ldi	r28, 0x00	; 0
	while(ch<64)
 4ce:	0a c0       	rjmp	.+20     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 4d0:	d1 e0       	ldi	r29, 0x01	; 1
 4d2:	d6 0f       	add	r29, r22
 4d4:	8c 2f       	mov	r24, r28
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	88 57       	subi	r24, 0x78	; 120
 4da:	9f 4f       	sbci	r25, 0xFF	; 255
 4dc:	0e 94 ce 01 	call	0x39c	; 0x39c <LCDdefinechar>
		ch=ch+8;
 4e0:	c8 5f       	subi	r28, 0xF8	; 248
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 4e2:	6d 2f       	mov	r22, r29
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 4e4:	c0 34       	cpi	r28, 0x40	; 64
 4e6:	a0 f3       	brcs	.-24     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	08 95       	ret

000004ee <KEYPAD_Scan>:
		_delay_ms(10);
	}
}


uint8_t KEYPAD_Scan(uint8_t *key){
 4ee:	fc 01       	movw	r30, r24
	int c, f;

	for (f=0;f<4;f++){
 4f0:	40 e0       	ldi	r20, 0x00	; 0
 4f2:	50 e0       	ldi	r21, 0x00	; 0
 4f4:	66 c0       	rjmp	.+204    	; 0x5c2 <KEYPAD_Scan+0xd4>
		PORTB|=(1<<PORTB0) | (1<<PORTB3) | (1<<PORTB4);
 4f6:	95 b1       	in	r25, 0x05	; 5
 4f8:	99 61       	ori	r25, 0x19	; 25
 4fa:	95 b9       	out	0x05, r25	; 5
		PORTD|=(1<<PORTD7);
 4fc:	9b b1       	in	r25, 0x0b	; 11
 4fe:	90 68       	ori	r25, 0x80	; 128
 500:	9b b9       	out	0x0b, r25	; 11
		PORTD |= (1<<PORTD3) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD2);
 502:	9b b1       	in	r25, 0x0b	; 11
 504:	9c 63       	ori	r25, 0x3C	; 60
 506:	9b b9       	out	0x0b, r25	; 11
		switch(f)
 508:	41 30       	cpi	r20, 0x01	; 1
 50a:	51 05       	cpc	r21, r1
 50c:	81 f0       	breq	.+32     	; 0x52e <KEYPAD_Scan+0x40>
 50e:	24 f4       	brge	.+8      	; 0x518 <KEYPAD_Scan+0x2a>
 510:	41 15       	cp	r20, r1
 512:	51 05       	cpc	r21, r1
 514:	41 f0       	breq	.+16     	; 0x526 <KEYPAD_Scan+0x38>
 516:	16 c0       	rjmp	.+44     	; 0x544 <KEYPAD_Scan+0x56>
 518:	42 30       	cpi	r20, 0x02	; 2
 51a:	51 05       	cpc	r21, r1
 51c:	61 f0       	breq	.+24     	; 0x536 <KEYPAD_Scan+0x48>
 51e:	43 30       	cpi	r20, 0x03	; 3
 520:	51 05       	cpc	r21, r1
 522:	69 f0       	breq	.+26     	; 0x53e <KEYPAD_Scan+0x50>
 524:	0f c0       	rjmp	.+30     	; 0x544 <KEYPAD_Scan+0x56>
		{
			case 0:
			PORTB &= ~(1<<PORTB4);
 526:	85 b1       	in	r24, 0x05	; 5
 528:	8f 7e       	andi	r24, 0xEF	; 239
 52a:	85 b9       	out	0x05, r24	; 5
			break;
 52c:	0b c0       	rjmp	.+22     	; 0x544 <KEYPAD_Scan+0x56>

			case 1:
			PORTB &= ~(1<<PORTB3);
 52e:	85 b1       	in	r24, 0x05	; 5
 530:	87 7f       	andi	r24, 0xF7	; 247
 532:	85 b9       	out	0x05, r24	; 5
			break;
 534:	07 c0       	rjmp	.+14     	; 0x544 <KEYPAD_Scan+0x56>

			case 2:
			PORTB &= ~(1<<PORTB0);
 536:	85 b1       	in	r24, 0x05	; 5
 538:	8e 7f       	andi	r24, 0xFE	; 254
 53a:	85 b9       	out	0x05, r24	; 5
			break;
 53c:	03 c0       	rjmp	.+6      	; 0x544 <KEYPAD_Scan+0x56>

			case 3:
			PORTD &= ~(1<<PORTD7);
 53e:	8b b1       	in	r24, 0x0b	; 11
 540:	8f 77       	andi	r24, 0x7F	; 127
 542:	8b b9       	out	0x0b, r24	; 11
 544:	8f e1       	ldi	r24, 0x1F	; 31
 546:	9e e4       	ldi	r25, 0x4E	; 78
 548:	01 97       	sbiw	r24, 0x01	; 1
 54a:	f1 f7       	brne	.-4      	; 0x548 <KEYPAD_Scan+0x5a>
 54c:	00 c0       	rjmp	.+0      	; 0x54e <KEYPAD_Scan+0x60>
 54e:	00 00       	nop
			break;
		}

		_delay_ms(5);

		for(c=0;c<4;c++){
 550:	20 e0       	ldi	r18, 0x00	; 0
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	31 c0       	rjmp	.+98     	; 0x5b8 <KEYPAD_Scan+0xca>
			switch(c)
 556:	21 30       	cpi	r18, 0x01	; 1
 558:	31 05       	cpc	r19, r1
 55a:	a1 f0       	breq	.+40     	; 0x584 <KEYPAD_Scan+0x96>
 55c:	24 f4       	brge	.+8      	; 0x566 <KEYPAD_Scan+0x78>
 55e:	21 15       	cp	r18, r1
 560:	31 05       	cpc	r19, r1
 562:	41 f0       	breq	.+16     	; 0x574 <KEYPAD_Scan+0x86>
 564:	27 c0       	rjmp	.+78     	; 0x5b4 <KEYPAD_Scan+0xc6>
 566:	22 30       	cpi	r18, 0x02	; 2
 568:	31 05       	cpc	r19, r1
 56a:	a1 f0       	breq	.+40     	; 0x594 <KEYPAD_Scan+0xa6>
 56c:	23 30       	cpi	r18, 0x03	; 3
 56e:	31 05       	cpc	r19, r1
 570:	c9 f0       	breq	.+50     	; 0x5a4 <KEYPAD_Scan+0xb6>
 572:	20 c0       	rjmp	.+64     	; 0x5b4 <KEYPAD_Scan+0xc6>
			{
				case 0:
				if (!(PIND & (1<<PIND3))){
 574:	4b 99       	sbic	0x09, 3	; 9
 576:	1e c0       	rjmp	.+60     	; 0x5b4 <KEYPAD_Scan+0xc6>
					*key=(f*4+c);
 578:	44 0f       	add	r20, r20
 57a:	44 0f       	add	r20, r20
 57c:	24 0f       	add	r18, r20
 57e:	20 83       	st	Z, r18
					return 1;
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	08 95       	ret
				}
				break;

				case 1:
				if (!(PIND & (1<<PIND5))){
 584:	4d 99       	sbic	0x09, 5	; 9
 586:	16 c0       	rjmp	.+44     	; 0x5b4 <KEYPAD_Scan+0xc6>
					*key=(f*4+c);
 588:	44 0f       	add	r20, r20
 58a:	44 0f       	add	r20, r20
 58c:	24 0f       	add	r18, r20
 58e:	20 83       	st	Z, r18
					return 1;
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	08 95       	ret
				}
				break;

				case 2:
				if (!(PIND & (1<<PIND4))){
 594:	4c 99       	sbic	0x09, 4	; 9
 596:	0e c0       	rjmp	.+28     	; 0x5b4 <KEYPAD_Scan+0xc6>
					*key=(f*4+c);
 598:	44 0f       	add	r20, r20
 59a:	44 0f       	add	r20, r20
 59c:	24 0f       	add	r18, r20
 59e:	20 83       	st	Z, r18
					return 1;
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	08 95       	ret
				}
				break;

				case 3:
				if (!(PIND & (1<<PIND2))){
 5a4:	4a 99       	sbic	0x09, 2	; 9
 5a6:	06 c0       	rjmp	.+12     	; 0x5b4 <KEYPAD_Scan+0xc6>
					*key=(f*4+c);
 5a8:	44 0f       	add	r20, r20
 5aa:	44 0f       	add	r20, r20
 5ac:	24 0f       	add	r18, r20
 5ae:	20 83       	st	Z, r18
					return 1;
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	08 95       	ret
			break;
		}

		_delay_ms(5);

		for(c=0;c<4;c++){
 5b4:	2f 5f       	subi	r18, 0xFF	; 255
 5b6:	3f 4f       	sbci	r19, 0xFF	; 255
 5b8:	24 30       	cpi	r18, 0x04	; 4
 5ba:	31 05       	cpc	r19, r1
 5bc:	64 f2       	brlt	.-104    	; 0x556 <KEYPAD_Scan+0x68>


uint8_t KEYPAD_Scan(uint8_t *key){
	int c, f;

	for (f=0;f<4;f++){
 5be:	4f 5f       	subi	r20, 0xFF	; 255
 5c0:	5f 4f       	sbci	r21, 0xFF	; 255
 5c2:	44 30       	cpi	r20, 0x04	; 4
 5c4:	51 05       	cpc	r21, r1
 5c6:	0c f4       	brge	.+2      	; 0x5ca <KEYPAD_Scan+0xdc>
 5c8:	96 cf       	rjmp	.-212    	; 0x4f6 <KEYPAD_Scan+0x8>
				}
				break;
			}
		}
	}
	return 0;
 5ca:	80 e0       	ldi	r24, 0x00	; 0
};
 5cc:	08 95       	ret

000005ce <Chequear_Car>:


void Chequear_Car(uint8_t *c){
	switch(*c)
 5ce:	dc 01       	movw	r26, r24
 5d0:	ec 91       	ld	r30, X
 5d2:	4e 2f       	mov	r20, r30
 5d4:	50 e0       	ldi	r21, 0x00	; 0
 5d6:	40 31       	cpi	r20, 0x10	; 16
 5d8:	51 05       	cpc	r21, r1
 5da:	08 f0       	brcs	.+2      	; 0x5de <Chequear_Car+0x10>
 5dc:	44 c0       	rjmp	.+136    	; 0x666 <Chequear_Car+0x98>
 5de:	fa 01       	movw	r30, r20
 5e0:	ec 5c       	subi	r30, 0xCC	; 204
 5e2:	ff 4f       	sbci	r31, 0xFF	; 255
 5e4:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__tablejump2__>
	{
		case 0:
		*c=(int)'1';
 5e8:	21 e3       	ldi	r18, 0x31	; 49
 5ea:	fc 01       	movw	r30, r24
 5ec:	20 83       	st	Z, r18
		break;
 5ee:	08 95       	ret
		case 1:
		*c=(int)'2';
 5f0:	22 e3       	ldi	r18, 0x32	; 50
 5f2:	dc 01       	movw	r26, r24
 5f4:	2c 93       	st	X, r18
		break;
 5f6:	08 95       	ret
		case 2:
		*c=(int)'3';
 5f8:	23 e3       	ldi	r18, 0x33	; 51
 5fa:	fc 01       	movw	r30, r24
 5fc:	20 83       	st	Z, r18
		break;
 5fe:	08 95       	ret
		case 3:
		*c=(int)'A';
 600:	21 e4       	ldi	r18, 0x41	; 65
 602:	dc 01       	movw	r26, r24
 604:	2c 93       	st	X, r18
		break;
 606:	08 95       	ret
		case 4:
		*c=(int)'4';
 608:	24 e3       	ldi	r18, 0x34	; 52
 60a:	fc 01       	movw	r30, r24
 60c:	20 83       	st	Z, r18
		break;
 60e:	08 95       	ret
		case 5:
		*c=(int)'5';
 610:	25 e3       	ldi	r18, 0x35	; 53
 612:	dc 01       	movw	r26, r24
 614:	2c 93       	st	X, r18
		break;
 616:	08 95       	ret
		case 6:
		*c=(int)'6';
 618:	26 e3       	ldi	r18, 0x36	; 54
 61a:	fc 01       	movw	r30, r24
 61c:	20 83       	st	Z, r18
		break;
 61e:	08 95       	ret
		case 7:
		*c=(int)'B';
 620:	22 e4       	ldi	r18, 0x42	; 66
 622:	dc 01       	movw	r26, r24
 624:	2c 93       	st	X, r18
		break;
 626:	08 95       	ret
		case 8:
		*c=(int)'7';
 628:	27 e3       	ldi	r18, 0x37	; 55
 62a:	fc 01       	movw	r30, r24
 62c:	20 83       	st	Z, r18
		break;
 62e:	08 95       	ret
		case 9:
		*c=(int)'8';
 630:	28 e3       	ldi	r18, 0x38	; 56
 632:	dc 01       	movw	r26, r24
 634:	2c 93       	st	X, r18
		break;
 636:	08 95       	ret
		case 10:
		*c=(int)'9';
 638:	29 e3       	ldi	r18, 0x39	; 57
 63a:	fc 01       	movw	r30, r24
 63c:	20 83       	st	Z, r18
		break;
 63e:	08 95       	ret
		case 11:
		*c=(int)'C';
 640:	23 e4       	ldi	r18, 0x43	; 67
 642:	dc 01       	movw	r26, r24
 644:	2c 93       	st	X, r18
		break;
 646:	08 95       	ret
		case 12:
		*c=(int)'*';
 648:	2a e2       	ldi	r18, 0x2A	; 42
 64a:	fc 01       	movw	r30, r24
 64c:	20 83       	st	Z, r18
		break;
 64e:	08 95       	ret
		case 13:
		*c=(int)'0';
 650:	20 e3       	ldi	r18, 0x30	; 48
 652:	dc 01       	movw	r26, r24
 654:	2c 93       	st	X, r18
		break;
 656:	08 95       	ret
		case 14:
		*c=(int)'#';
 658:	23 e2       	ldi	r18, 0x23	; 35
 65a:	fc 01       	movw	r30, r24
 65c:	20 83       	st	Z, r18
		break;
 65e:	08 95       	ret
		case 15:
		*c=(int)'D';
 660:	24 e4       	ldi	r18, 0x44	; 68
 662:	dc 01       	movw	r26, r24
 664:	2c 93       	st	X, r18
 666:	08 95       	ret

00000668 <main>:

uint8_t KEYPAD_Scan(uint8_t *);
void Chequear_Car(uint8_t *);

int main(void)
{
 668:	cf 93       	push	r28
 66a:	df 93       	push	r29
 66c:	1f 92       	push	r1
 66e:	cd b7       	in	r28, 0x3d	; 61
 670:	de b7       	in	r29, 0x3e	; 62
	uint8_t tecla;
	DDRB|=(1<<PORTB0) | (1<<PORTB3) | (1<<PORTB4);
 672:	84 b1       	in	r24, 0x04	; 4
 674:	89 61       	ori	r24, 0x19	; 25
 676:	84 b9       	out	0x04, r24	; 4
	DDRD|=(1<<PORTD7);
 678:	8a b1       	in	r24, 0x0a	; 10
 67a:	80 68       	ori	r24, 0x80	; 128
 67c:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<PORTD3) | ~(1<<PORTD5) | ~(1<<PORTD4) | ~(1<<PORTD2);
 67e:	8a b1       	in	r24, 0x0a	; 10
 680:	8a b9       	out	0x0a, r24	; 10
 682:	2f ef       	ldi	r18, 0xFF	; 255
 684:	83 ed       	ldi	r24, 0xD3	; 211
 686:	90 e3       	ldi	r25, 0x30	; 48
 688:	21 50       	subi	r18, 0x01	; 1
 68a:	80 40       	sbci	r24, 0x00	; 0
 68c:	90 40       	sbci	r25, 0x00	; 0
 68e:	e1 f7       	brne	.-8      	; 0x688 <main+0x20>
 690:	00 c0       	rjmp	.+0      	; 0x692 <main+0x2a>
 692:	00 00       	nop

	_delay_ms(1000);
	LCDinit();
 694:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LCDinit>
	//LCDclr();
	LCDGotoXY(0, 0);
 698:	60 e0       	ldi	r22, 0x00	; 0
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	0e 94 bf 01 	call	0x37e	; 0x37e <LCDGotoXY>
	LCDstring("Tecla: ",7);
 6a0:	67 e0       	ldi	r22, 0x07	; 7
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	91 e0       	ldi	r25, 0x01	; 1
 6a6:	0e 94 a7 01 	call	0x34e	; 0x34e <LCDstring>



	while (1) {
		LCDGotoXY(7, 0);
 6aa:	60 e0       	ldi	r22, 0x00	; 0
 6ac:	87 e0       	ldi	r24, 0x07	; 7
 6ae:	0e 94 bf 01 	call	0x37e	; 0x37e <LCDGotoXY>
		if (KEYPAD_Scan(&tecla)){
 6b2:	ce 01       	movw	r24, r28
 6b4:	01 96       	adiw	r24, 0x01	; 1
 6b6:	0e 94 77 02 	call	0x4ee	; 0x4ee <KEYPAD_Scan>
 6ba:	88 23       	and	r24, r24
 6bc:	39 f0       	breq	.+14     	; 0x6cc <main+0x64>
			Chequear_Car(&tecla);
 6be:	ce 01       	movw	r24, r28
 6c0:	01 96       	adiw	r24, 0x01	; 1
 6c2:	0e 94 e7 02 	call	0x5ce	; 0x5ce <Chequear_Car>
			LCDsendChar(tecla);
 6c6:	89 81       	ldd	r24, Y+1	; 0x01
 6c8:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCDsendChar>
 6cc:	8f e3       	ldi	r24, 0x3F	; 63
 6ce:	9c e9       	ldi	r25, 0x9C	; 156
 6d0:	01 97       	sbiw	r24, 0x01	; 1
 6d2:	f1 f7       	brne	.-4      	; 0x6d0 <main+0x68>
 6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <main+0x6e>
 6d6:	00 00       	nop
 6d8:	e8 cf       	rjmp	.-48     	; 0x6aa <main+0x42>

000006da <__tablejump2__>:
 6da:	ee 0f       	add	r30, r30
 6dc:	ff 1f       	adc	r31, r31
 6de:	05 90       	lpm	r0, Z+
 6e0:	f4 91       	lpm	r31, Z
 6e2:	e0 2d       	mov	r30, r0
 6e4:	09 94       	ijmp

000006e6 <_exit>:
 6e6:	f8 94       	cli

000006e8 <__stop_program>:
 6e8:	ff cf       	rjmp	.-2      	; 0x6e8 <__stop_program>
