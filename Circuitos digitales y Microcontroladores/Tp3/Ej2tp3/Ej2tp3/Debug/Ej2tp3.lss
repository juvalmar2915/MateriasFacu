
Ej2tp3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000001b0  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000749  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000690  00000000  00000000  00000a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000282  00000000  00000000  000010a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001328  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a9  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b3  00000000  00000000  00001705  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 eb       	ldi	r30, 0xB0	; 176
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#define F_CPU 16000000UL
#include <util/delay.h>


int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	68 97       	sbiw	r28, 0x18	; 24
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	uint16_t note[12] =
  aa:	88 e1       	ldi	r24, 0x18	; 24
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	8a 95       	dec	r24
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x1e>
	uint16_t valores[12] =
	{
		//C C# D D# E F F# G G# A A# B
		119, 111, 105, 99, 93, 88, 83, 78, 74, 70, 66, 62 //4th octave
	};
	DDRB=(1<<PORTB1);
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	84 b9       	out	0x04, r24	; 4
	TCCR1A=(1<<COM1A0);
  c0:	80 e4       	ldi	r24, 0x40	; 64
  c2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B=(1<<WGM12) | (1<<CS12);
  c6:	8c e0       	ldi	r24, 0x0C	; 12
  c8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	int i;
    while (1) 
    {
		for (i=0;i<12;i++){
  cc:	00 e0       	ldi	r16, 0x00	; 0
  ce:	10 e0       	ldi	r17, 0x00	; 0
  d0:	28 c0       	rjmp	.+80     	; 0x122 <main+0x8c>
			OCR1A=(int)(16000000/(int)(2*256*note[i]))-1;
  d2:	f8 01       	movw	r30, r16
  d4:	ee 0f       	add	r30, r30
  d6:	ff 1f       	adc	r31, r31
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	8c 0f       	add	r24, r28
  de:	9d 1f       	adc	r25, r29
  e0:	e8 0f       	add	r30, r24
  e2:	f9 1f       	adc	r31, r25
  e4:	80 81       	ld	r24, Z
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	38 2f       	mov	r19, r24
  ea:	33 0f       	add	r19, r19
  ec:	03 2e       	mov	r0, r19
  ee:	00 0c       	add	r0, r0
  f0:	44 0b       	sbc	r20, r20
  f2:	55 0b       	sbc	r21, r21
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	74 e2       	ldi	r23, 0x24	; 36
  f8:	84 ef       	ldi	r24, 0xF4	; 244
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 95 00 	call	0x12a	; 0x12a <__divmodsi4>
 100:	21 50       	subi	r18, 0x01	; 1
 102:	31 09       	sbc	r19, r1
 104:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 108:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	9f ef       	ldi	r25, 0xFF	; 255
 10e:	27 ea       	ldi	r18, 0xA7	; 167
 110:	81 e6       	ldi	r24, 0x61	; 97
 112:	91 50       	subi	r25, 0x01	; 1
 114:	20 40       	sbci	r18, 0x00	; 0
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x7c>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x86>
 11c:	00 00       	nop
	TCCR1A=(1<<COM1A0);
	TCCR1B=(1<<WGM12) | (1<<CS12);
	int i;
    while (1) 
    {
		for (i=0;i<12;i++){
 11e:	0f 5f       	subi	r16, 0xFF	; 255
 120:	1f 4f       	sbci	r17, 0xFF	; 255
 122:	0c 30       	cpi	r16, 0x0C	; 12
 124:	11 05       	cpc	r17, r1
 126:	ac f2       	brlt	.-86     	; 0xd2 <main+0x3c>
 128:	d1 cf       	rjmp	.-94     	; 0xcc <main+0x36>

0000012a <__divmodsi4>:
 12a:	05 2e       	mov	r0, r21
 12c:	97 fb       	bst	r25, 7
 12e:	1e f4       	brtc	.+6      	; 0x136 <__divmodsi4+0xc>
 130:	00 94       	com	r0
 132:	0e 94 ac 00 	call	0x158	; 0x158 <__negsi2>
 136:	57 fd       	sbrc	r21, 7
 138:	07 d0       	rcall	.+14     	; 0x148 <__divmodsi4_neg2>
 13a:	0e 94 b4 00 	call	0x168	; 0x168 <__udivmodsi4>
 13e:	07 fc       	sbrc	r0, 7
 140:	03 d0       	rcall	.+6      	; 0x148 <__divmodsi4_neg2>
 142:	4e f4       	brtc	.+18     	; 0x156 <__divmodsi4_exit>
 144:	0c 94 ac 00 	jmp	0x158	; 0x158 <__negsi2>

00000148 <__divmodsi4_neg2>:
 148:	50 95       	com	r21
 14a:	40 95       	com	r20
 14c:	30 95       	com	r19
 14e:	21 95       	neg	r18
 150:	3f 4f       	sbci	r19, 0xFF	; 255
 152:	4f 4f       	sbci	r20, 0xFF	; 255
 154:	5f 4f       	sbci	r21, 0xFF	; 255

00000156 <__divmodsi4_exit>:
 156:	08 95       	ret

00000158 <__negsi2>:
 158:	90 95       	com	r25
 15a:	80 95       	com	r24
 15c:	70 95       	com	r23
 15e:	61 95       	neg	r22
 160:	7f 4f       	sbci	r23, 0xFF	; 255
 162:	8f 4f       	sbci	r24, 0xFF	; 255
 164:	9f 4f       	sbci	r25, 0xFF	; 255
 166:	08 95       	ret

00000168 <__udivmodsi4>:
 168:	a1 e2       	ldi	r26, 0x21	; 33
 16a:	1a 2e       	mov	r1, r26
 16c:	aa 1b       	sub	r26, r26
 16e:	bb 1b       	sub	r27, r27
 170:	fd 01       	movw	r30, r26
 172:	0d c0       	rjmp	.+26     	; 0x18e <__udivmodsi4_ep>

00000174 <__udivmodsi4_loop>:
 174:	aa 1f       	adc	r26, r26
 176:	bb 1f       	adc	r27, r27
 178:	ee 1f       	adc	r30, r30
 17a:	ff 1f       	adc	r31, r31
 17c:	a2 17       	cp	r26, r18
 17e:	b3 07       	cpc	r27, r19
 180:	e4 07       	cpc	r30, r20
 182:	f5 07       	cpc	r31, r21
 184:	20 f0       	brcs	.+8      	; 0x18e <__udivmodsi4_ep>
 186:	a2 1b       	sub	r26, r18
 188:	b3 0b       	sbc	r27, r19
 18a:	e4 0b       	sbc	r30, r20
 18c:	f5 0b       	sbc	r31, r21

0000018e <__udivmodsi4_ep>:
 18e:	66 1f       	adc	r22, r22
 190:	77 1f       	adc	r23, r23
 192:	88 1f       	adc	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	1a 94       	dec	r1
 198:	69 f7       	brne	.-38     	; 0x174 <__udivmodsi4_loop>
 19a:	60 95       	com	r22
 19c:	70 95       	com	r23
 19e:	80 95       	com	r24
 1a0:	90 95       	com	r25
 1a2:	9b 01       	movw	r18, r22
 1a4:	ac 01       	movw	r20, r24
 1a6:	bd 01       	movw	r22, r26
 1a8:	cf 01       	movw	r24, r30
 1aa:	08 95       	ret

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
